{
	"info": {
		"name": "Grou",
		"_postman_id": "fba7f154-99e1-4623-4b56-490312730d7a",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Tests",
			"description": "",
			"item": [
				{
					"name": "Failures",
					"description": "",
					"item": [
						{
							"name": "Empty payload",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"",
											"pm.test('Status code is 500', function() {",
											"    pm.response.to.be.serverError;",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test('Exception is throwed', function() {",
											"    pm.response.to.have.jsonBody('exception', 'com.fasterxml.jackson.databind.JsonMappingException');",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.sendRequest(\"http://{{OS_USERNAME}}:{{OS_PASSWORD}}@{{URL}}:{{PORT}}/token/{{OS_PROJECT}}\", function (err, response) {",
											"    pm.environment.set(\"OS_TOKEN\", response.text());",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-auth-token",
										"value": "{{OS_TOKEN}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{URL}}:{{PORT}}/tests",
									"protocol": "http",
									"host": [
										"{{URL}}"
									],
									"port": "{{PORT}}",
									"path": [
										"tests"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Empty properties",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"",
											"pm.test('Status code is 201', function() {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"tests['Test status is ENQUEUED or SCHEDULED'] = (jsonData.status === 'ENQUEUED' || jsonData.status === 'SCHEDULED');",
											"",
											"setTimeout(function() {",
											"    pm.sendRequest({",
											"        url: pm.response.headers.get('Location'),",
											"        method: 'GET',",
											"        header: ['x-auth-token:{{OS_TOKEN}}', 'x-project:{{OS_PROJECT}}'],",
											"        body: {},",
											"    }, function(err, resp) {",
											"        if (err) { console.log(err); }",
											"        var data = JSON.parse(resp.text());",
											"        ",
											"        pm.test('Test status change to ERROR', function() {",
											"            pm.expect(data.status).to.equal('ERROR');",
											"        });",
											"        ",
											"        var msg = 'durationTimeMillis property undefined or less than 1000 ms';",
											"        pm.test('Status detailed is ' + msg, function() {",
											"            pm.expect(data.loaders[0].statusDetailed).to.equal(msg);",
											"        });",
											"    })",
											"}, 6000);",
											"",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.sendRequest(\"http://{{OS_USERNAME}}:{{OS_PASSWORD}}@{{URL}}:{{PORT}}/token/{{OS_PROJECT}}\", function (err, response) {",
											"    pm.environment.set(\"OS_TOKEN\", response.text());",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-auth-token",
										"value": "{{OS_TOKEN}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{$timestamp}}\", \n\t\"project\": \"{{OS_PROJECT}}\", \n\t\"properties\": {}\n}\n"
								},
								"url": {
									"raw": "http://{{URL}}:{{PORT}}/tests",
									"protocol": "http",
									"host": [
										"{{URL}}"
									],
									"port": "{{PORT}}",
									"path": [
										"tests"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Without numConn in Properties",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"",
											"",
											"pm.test('Status code is 201', function() {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"tests['Test status is ENQUEUED or SCHEDULED'] = (jsonData.status === 'ENQUEUED' || jsonData.status === 'SCHEDULED');",
											"",
											"setTimeout(function() {",
											"    pm.sendRequest({",
											"        url: pm.response.headers.get('Location'),",
											"        method: 'GET',",
											"        header: ['x-auth-token:{{OS_TOKEN}}', 'x-project:{{OS_PROJECT}}'],",
											"        body: {},",
											"    }, function(err, resp) {",
											"        if (err) { console.log(err); }",
											"        var data = JSON.parse(resp.text());",
											"        ",
											"        pm.test('Test status change to ERROR', function() {",
											"            pm.expect(data.status).to.equal('ERROR');",
											"        });",
											"        ",
											"        var msg = 'numConn property undefined or less than 1 conn';",
											"        pm.test('Status detailed is ' + msg, function() {",
											"            pm.expect(data.loaders[0].statusDetailed).to.equal(msg);",
											"        });",
											"    });",
											"}, 6000);"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.sendRequest(\"http://{{OS_USERNAME}}:{{OS_PASSWORD}}@{{URL}}:{{PORT}}/token/{{OS_PROJECT}}\", function (err, response) {",
											"    pm.environment.set(\"OS_TOKEN\", response.text());",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-auth-token",
										"value": "{{OS_TOKEN}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{$timestamp}}\", \n\t\"project\": \"{{OS_PROJECT}}\", \n\t\"properties\": { \n\t\t\"uri\": \"http://{{URL}}:{{PORT}}/version\", \n\t\t\"durationTimeMillis\":5000, \n\t\t\"monitTargets\":\"zero://s1.local/?key=s1.local\"\n\t}\n}\n"
								},
								"url": {
									"raw": "http://{{URL}}:{{PORT}}/tests",
									"protocol": "http",
									"host": [
										"{{URL}}"
									],
									"port": "{{PORT}}",
									"path": [
										"tests"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Invalid numConn in Properties",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"",
											"",
											"pm.test('Status code is 201', function() {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"tests['Test status is ENQUEUED or SCHEDULED'] = (jsonData.status === 'ENQUEUED' || jsonData.status === 'SCHEDULED');",
											"",
											"setTimeout(function() {",
											"    pm.sendRequest({",
											"        url: pm.response.headers.get('Location'),",
											"        method: 'GET',",
											"        header: ['x-auth-token:{{OS_TOKEN}}', 'x-project:{{OS_PROJECT}}'],",
											"        body: {},",
											"    }, function(err, resp) {",
											"        if (err) { console.log(err); }",
											"        var data = JSON.parse(resp.text());",
											"        ",
											"        pm.test('Test status change to ERROR', function() {",
											"            pm.expect(data.status).to.equal('ERROR');",
											"        });",
											"        ",
											"        var msg = 'numConn property undefined or less than 1 conn';",
											"        pm.test('Status detailed is ' + msg, function() {",
											"            pm.expect(data.loaders[0].statusDetailed).to.equal(msg);",
											"        });",
											"    });",
											"}, 6000);"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.sendRequest(\"http://{{OS_USERNAME}}:{{OS_PASSWORD}}@{{URL}}:{{PORT}}/token/{{OS_PROJECT}}\", function (err, response) {",
											"    pm.environment.set(\"OS_TOKEN\", response.text());",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-auth-token",
										"value": "{{OS_TOKEN}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{$timestamp}}\", \n\t\"project\": \"{{OS_PROJECT}}\", \n\t\"properties\": { \n\t\t\"uri\": \"http://{{URL}}:{{PORT}}/version\",\n\t\t\"numConn\": \"!\",\n\t\t\"durationTimeMillis\":5000, \n\t\t\"monitTargets\":\"zero://s1.local/?key=s1.local\"\n\t}\n}\n"
								},
								"url": {
									"raw": "http://{{URL}}:{{PORT}}/tests",
									"protocol": "http",
									"host": [
										"{{URL}}"
									],
									"port": "{{PORT}}",
									"path": [
										"tests"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Without durationTimeMillis in Properties",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"",
											"",
											"pm.test('Status code is 201', function() {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"tests['Test status is ENQUEUED or SCHEDULED'] = (jsonData.status === 'ENQUEUED' || jsonData.status === 'SCHEDULED');",
											"",
											"setTimeout(function() {",
											"    pm.sendRequest({",
											"        url: pm.response.headers.get('Location'),",
											"        method: 'GET',",
											"        header: ['x-auth-token:{{OS_TOKEN}}', 'x-project:{{OS_PROJECT}}'],",
											"        body: {},",
											"    }, function(err, resp) {",
											"        if (err) { console.log(err); }",
											"        var data = JSON.parse(resp.text());",
											"        ",
											"        pm.test('Test status change to ERROR', function() {",
											"            pm.expect(data.status).to.equal('ERROR');",
											"        });",
											"        ",
											"        var msg = 'durationTimeMillis property undefined or less than 1000 ms';",
											"        pm.test('Status detailed is ' + msg, function() {",
											"            pm.expect(data.loaders[0].statusDetailed).to.equal(msg);",
											"        });",
											"    });",
											"}, 6000);"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.sendRequest(\"http://{{OS_USERNAME}}:{{OS_PASSWORD}}@{{URL}}:{{PORT}}/token/{{OS_PROJECT}}\", function (err, response) {",
											"    pm.environment.set(\"OS_TOKEN\", response.text());",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-auth-token",
										"value": "{{OS_TOKEN}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{$timestamp}}\", \n\t\"project\": \"{{OS_PROJECT}}\", \n\t\"properties\": { \n\t\t\"uri\": \"http://{{URL}}:{{PORT}}/version\",\n\t\t\"numConn\": 1,\n\t\t\"monitTargets\":\"zero://s1.local/?key=s1.local\"\n\t}\n}\n"
								},
								"url": {
									"raw": "http://{{URL}}:{{PORT}}/tests",
									"protocol": "http",
									"host": [
										"{{URL}}"
									],
									"port": "{{PORT}}",
									"path": [
										"tests"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Invalid durationTimeMillis in Properties",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"",
											"",
											"pm.test('Status code is 201', function() {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"tests['Test status is ENQUEUED or SCHEDULED'] = (jsonData.status === 'ENQUEUED' || jsonData.status === 'SCHEDULED');",
											"",
											"setTimeout(function() {",
											"    pm.sendRequest({",
											"        url: pm.response.headers.get('Location'),",
											"        method: 'GET',",
											"        header: ['x-auth-token:{{OS_TOKEN}}', 'x-project:{{OS_PROJECT}}'],",
											"        body: {},",
											"    }, function(err, resp) {",
											"        if (err) { console.log(err); }",
											"        var data = JSON.parse(resp.text());",
											"        ",
											"        pm.test('Test status change to ERROR', function() {",
											"            pm.expect(data.status).to.equal('ERROR');",
											"        });",
											"        ",
											"        var msg = 'durationTimeMillis property undefined or less than 1000 ms';",
											"        pm.test('Status detailed is ' + msg, function() {",
											"            pm.expect(data.loaders[0].statusDetailed).to.equal(msg);",
											"        });",
											"    });",
											"}, 6000);"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.sendRequest(\"http://{{OS_USERNAME}}:{{OS_PASSWORD}}@{{URL}}:{{PORT}}/token/{{OS_PROJECT}}\", function (err, response) {",
											"    pm.environment.set(\"OS_TOKEN\", response.text());",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-auth-token",
										"value": "{{OS_TOKEN}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{$timestamp}}\", \n\t\"project\": \"{{OS_PROJECT}}\", \n\t\"properties\": { \n\t\t\"uri\": \"http://{{URL}}:{{PORT}}/version\",\n\t\t\"numConn\": 1,\n\t\t\"durationTimeMillis\":\"!\", \n\t\t\"monitTargets\":\"zero://s1.local/?key=s1.local\"\n\t}\n}\n"
								},
								"url": {
									"raw": "http://{{URL}}:{{PORT}}/tests",
									"protocol": "http",
									"host": [
										"{{URL}}"
									],
									"port": "{{PORT}}",
									"path": [
										"tests"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Target with another protocol",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"",
											"pm.test('Status code is 201', function() {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"tests['Test status is ENQUEUED or SCHEDULED'] = (jsonData.status === 'ENQUEUED' || jsonData.status === 'SCHEDULED');",
											"",
											"setTimeout(function() {",
											"    pm.sendRequest({",
											"        url: pm.response.headers.get('Location'),",
											"        method: 'GET',",
											"        header: ['x-auth-token:{{OS_TOKEN}}', 'x-project:{{OS_PROJECT}}'],",
											"    }, function(err, resp) {",
											"        if (err) { console.log(err); }",
											"        var jsonData = resp.json();",
											"        ",
											"        pm.test('Test status change to ERROR', function() {",
											"            pm.expect(jsonData.status).to.eql('ERROR');",
											"        });",
											"        ",
											"        var msg = \"The URI scheme, of the URI ftp://localhost:8080/, must be equal (ignoring case) to ‘http’, ‘https’, ‘ws’, or ‘wss’\";",
											"        pm.test('Status detailed is ' + msg, function() {",
											"            pm.expect(jsonData.loaders[0].statusDetailed).to.equal(msg);",
											"        });",
											"    });",
											"}, 6000);"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.sendRequest(\"http://{{OS_USERNAME}}:{{OS_PASSWORD}}@{{URL}}:{{PORT}}/token/{{OS_PROJECT}}\", function (err, response) {",
											"    pm.environment.set(\"OS_TOKEN\", response.text());",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-auth-token",
										"value": "{{OS_TOKEN}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{$timestamp}}\", \n\t\"project\": \"{{OS_PROJECT}}\", \n\t\"properties\": { \n\t\t\"uri\": \"ftp://{{URL}}:{{PORT}}/\", \n\t\t\"numConn\": 2, \n\t\t\"durationTimeMillis\":5000, \n\t\t\"monitTargets\":\"zero://s1.local/?key=s1.local\"\n\t}\n}\n"
								},
								"url": {
									"raw": "http://{{URL}}:{{PORT}}/tests",
									"protocol": "http",
									"host": [
										"{{URL}}"
									],
									"port": "{{PORT}}",
									"path": [
										"tests"
									]
								},
								"description": "500 Internal Server Error"
							},
							"response": []
						},
						{
							"name": "Invalid URI",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"",
											"pm.test('Status code is 201', function() {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"tests['Test status is ENQUEUED or SCHEDULED'] = (jsonData.status === 'ENQUEUED' || jsonData.status === 'SCHEDULED');",
											"",
											"setTimeout(function() {",
											"    pm.sendRequest({",
											"        url: pm.response.headers.get('Location'),",
											"        method: 'GET',",
											"        header: ['x-auth-token:{{OS_TOKEN}}', 'x-project:{{OS_PROJECT}}'],",
											"    }, function(err, resp) {",
											"        if (err) { console.log(err); }",
											"        var jsonData = resp.json();",
											"        ",
											"        pm.test('Test status change to ERROR', function() {",
											"            pm.expect(jsonData.status).to.eql('ERROR');",
											"        });",
											"        ",
											"        var msg = \"Illegal character in authority at index 7: http://inv@L1d--->com/xxx3\";",
											"        pm.test('Status detailed is ' + msg, function() {",
											"            pm.expect(jsonData.loaders[0].statusDetailed).to.eql(msg);",
											"        });",
											"    })",
											"}, 6000);",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.sendRequest(\"http://{{OS_USERNAME}}:{{OS_PASSWORD}}@{{URL}}:{{PORT}}/token/{{OS_PROJECT}}\", function (err, response) {",
											"    pm.environment.set(\"OS_TOKEN\", response.text());",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-auth-token",
										"value": "{{OS_TOKEN}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{$timestamp}}\", \n\t\"project\": \"{{OS_PROJECT}}\", \n\t\"properties\": { \n\t\t\"uri\": \"http://inv@L1d--->com/xxx3\", \n\t\t\"numConn\": 2, \n\t\t\"durationTimeMillis\":5000, \n\t\t\"monitTargets\":\"zero://s1.local/?key=s1.local\"\n\t}\n}\n"
								},
								"url": {
									"raw": "http://{{URL}}:{{PORT}}/tests",
									"protocol": "http",
									"host": [
										"{{URL}}"
									],
									"port": "{{PORT}}",
									"path": [
										"tests"
									]
								},
								"description": "500 Internal Server Error"
							},
							"response": []
						},
						{
							"name": "Empty URI",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"",
											"pm.test('Status code is 201', function() {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"tests['Test status is ENQUEUED or SCHEDULED'] = (jsonData.status === 'ENQUEUED' || jsonData.status === 'SCHEDULED');",
											"",
											"setTimeout(function() {",
											"    pm.sendRequest({",
											"        url: pm.response.headers.get('Location'),",
											"        method: 'GET',",
											"        header: ['x-auth-token:{{OS_TOKEN}}', 'x-project:{{OS_PROJECT}}'],",
											"        body: {},",
											"    }, function(err, resp) {",
											"        pm.test('Test status change to ERROR', function() {",
											"            if (err) { console.log(err); }",
											"            pm.expect(resp).to.have.jsonBody('status', 'ERROR');",
											"        })",
											"    })",
											"}, 6000);"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.sendRequest(\"http://{{OS_USERNAME}}:{{OS_PASSWORD}}@{{URL}}:{{PORT}}/token/{{OS_PROJECT}}\", function (err, response) {",
											"    pm.environment.set(\"OS_TOKEN\", response.text());",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-auth-token",
										"value": "{{OS_TOKEN}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{$timestamp}}\", \n\t\"project\": \"{{OS_PROJECT}}\", \n\t\"properties\": { \n\t\t\"uri\": \"\", \n\t\t\"numConn\": 2, \n\t\t\"durationTimeMillis\":1000, \n\t\t\"monitTargets\":\"zero://s1.local/?key=s1.local\"\n\t}\n}\n"
								},
								"url": {
									"raw": "http://{{URL}}:{{PORT}}/tests",
									"protocol": "http",
									"host": [
										"{{URL}}"
									],
									"port": "{{PORT}}",
									"path": [
										"tests"
									]
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Success",
					"description": "",
					"item": [
						{
							"name": "Creating test",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"",
											"pm.test('Status code is 201', function() {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"tests['Test status is ENQUEUED or SCHEDULED'] = (jsonData.status === 'ENQUEUED' || jsonData.status === 'SCHEDULED');",
											"",
											"pm.environment.set(\"CheckStatusURL\", pm.response.headers.get('Location'));",
											"pm.environment.set('nextRequest', 'Check if status is RUNNING');",
											"postman.setNextRequest('Check if status is RUNNING');"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.sendRequest(\"http://{{OS_USERNAME}}:{{OS_PASSWORD}}@{{URL}}:{{PORT}}/token/{{OS_PROJECT}}\", function (err, response) {",
											"    pm.environment.set(\"OS_TOKEN\", response.text());",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-auth-token",
										"value": "{{OS_TOKEN}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{$timestamp}}\", \n\t\"project\": \"{{OS_PROJECT}}\", \n\t\"properties\": { \n\t\t\"uri\": \"http://{{URL}}:{{PORT}}/version\", \n\t\t\"numConn\": 2, \n\t\t\"durationTimeMillis\":5000, \n\t\t\"monitTargets\":\"zero://s1.local/?key=s1.local\"\n\t}\n}\n"
								},
								"url": {
									"raw": "http://{{URL}}:{{PORT}}/tests",
									"protocol": "http",
									"host": [
										"{{URL}}"
									],
									"port": "{{PORT}}",
									"path": [
										"tests"
									]
								},
								"description": "Create load test:\n\n* numConn: 2 conn\n* durationTimeMillis: 5 sec\n\nResponse:\n\n* Expect `200 Ok`\n* Body with json:\n\t- status: SCHEDULED"
							},
							"response": []
						},
						{
							"name": "Check if status is RUNNING",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"if (jsonBody.status != 'ENQUEUED') {",
											"    pm.test('Check if status is RUNNING', function() {",
											"        pm.response.to.have.jsonBody('status', 'RUNNING');",
											"        ",
											"        pm.environment.unset('nextRequest');",
											"        pm.environment.set('nextRequest', 'Check if status is OK');",
											"        ",
											"        postman.setNextRequest('Check if status is OK');",
											"    });",
											"} else {",
											"    console.log(jsonBody);",
											"    postman.setNextRequest('Delay');",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-auth-token",
										"value": "{{OS_TOKEN}}"
									},
									{
										"key": "x-project",
										"value": "{{OS_PROJECT}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{CheckStatusURL}}",
									"host": [
										"{{CheckStatusURL}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Check if status is OK",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"if (jsonBody.status != 'RUNNING') {",
											"    pm.test('Check if status is OK', function() {",
											"        pm.response.to.have.jsonBody('status', 'OK');",
											"        pm.environment.unset('nextRequest');",
											"    });",
											"} else {",
											"    postman.setNextRequest('Delay');",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-auth-token",
										"value": "{{OS_TOKEN}}"
									},
									{
										"key": "x-project",
										"value": "{{OS_PROJECT}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{CheckStatusURL}}",
									"host": [
										"{{CheckStatusURL}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Delay",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"",
											"var next = pm.environment.get('nextRequest');",
											"",
											"if(next !== ''){",
											"    postman.setNextRequest(next);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "https://postman-echo.com/delay/2",
									"protocol": "https",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"delay",
										"2"
									]
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Token",
			"description": "Collection of the all of tests on resource /token/{project}\n\n* Happy path\n* Failed (invalid credentials)\n* Without Username\n* Without Password\n* Empty credentials\n* Username/Password with special characters",
			"item": [
				{
					"name": "Get Token Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test('Status code is 200', function() {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test('Body matches is a string', function() {",
									"    pm.expect(typeof pm.response.text()).to.equal('string'); // faz sentido ??",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{OS_USERNAME}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{OS_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{URL}}:{{PORT}}/token/{{OS_PROJECT}}",
							"host": [
								"{{URL}}"
							],
							"port": "{{PORT}}",
							"path": [
								"token",
								"{{OS_PROJECT}}"
							]
						},
						"description": "Sends request authorization to gain access.\n\n* Response code: `200 Ok`\n* Token: `string`"
					},
					"response": []
				},
				{
					"name": "Fake credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test('Status code is 401', function() {",
									"    pm.response.to.be.unauthorized;",
									"});",
									"",
									"pm.test('Body is empty', function() {",
									"    pm.response.to.have.body('');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "fake_username",
									"type": "string"
								},
								{
									"key": "password",
									"value": "fake_password",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{URL}}:{{PORT}}/token/{{OS_PROJECT}}",
							"host": [
								"{{URL}}"
							],
							"port": "{{PORT}}",
							"path": [
								"token",
								"{{OS_PROJECT}}"
							]
						},
						"description": "Sends request authorization to gain access with fake credentials\n\n* Response code: `401 Unauthorized`\n* Token: `no body`"
					},
					"response": []
				},
				{
					"name": "Invalid project",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test('Status code is 401', function() {",
									"    pm.response.to.be.unauthorized;",
									"});",
									"",
									"pm.test('Body is empty', function() {",
									"    pm.response.to.have.body('');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{OS_USERNAME}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{OS_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{URL}}:{{PORT}}/token/fake_project",
							"host": [
								"{{URL}}"
							],
							"port": "{{PORT}}",
							"path": [
								"token",
								"fake_project"
							]
						},
						"description": "Sends request authorization to gain access.\n\n* Response code: `401 Unauthorized`\n* Token: `no body`"
					},
					"response": []
				},
				{
					"name": "Empty project name",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test('Status code is 500', function() {",
									"    pm.response.to.have.status(500)",
									"});",
									"",
									"pm.test('Auth problem. Check token or project scope', function() {",
									"    pm.response.to.have.jsonBody('message', \"Auth problem. Check token or project scope\");",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{OS_USERNAME}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{OS_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{URL}}:{{PORT}}/token",
							"host": [
								"{{URL}}"
							],
							"port": "{{PORT}}",
							"path": [
								"token"
							]
						},
						"description": "Sends request authorization to gain access without project\n\n* Response code: `401 Unauthorized`\n* Token: `no body`"
					},
					"response": []
				},
				{
					"name": "Invalid password",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"// tests[\"response code is 401\"] = responseCode.code === 401;",
									"pm.test('Status code is 401', function() {",
									"    pm.response.to.be.unauthorized;",
									"});",
									"",
									"// tests[\"body is empty\"] = responseBody.has(\"\");",
									"pm.test('Body is empty', function() {",
									"    pm.response.to.have.body('');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{OS_USERNAME}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "fake_@#$%67^&",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{URL}}:{{PORT}}/token/{{OS_PROJECT}}",
							"host": [
								"{{URL}}"
							],
							"port": "{{PORT}}",
							"path": [
								"token",
								"{{OS_PROJECT}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Invalid username",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"// tests[\"response code is 401\"] = responseCode.code === 401;",
									"pm.test('Status code is 401', function() {",
									"    pm.response.to.be.unauthorized;",
									"});",
									"",
									"// tests[\"body is empty\"] = responseBody.has(\"\");",
									"pm.test('Body is empty', function() {",
									"    pm.response.to.have.body('');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "fake_@#$%67^&",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{OS_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{URL}}:{{PORT}}/token/{{OS_PROJECT}}",
							"host": [
								"{{URL}}"
							],
							"port": "{{PORT}}",
							"path": [
								"token",
								"{{OS_PROJECT}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Empty credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Body has message error\", function () {",
									"    pm.response.to.have.jsonBody(\"message\", \"Missing request header 'Authorization' for method parameter of type String\");",
									"});",
									"",
									"pm.test(\"Body has path\", function () {",
									"    pm.response.to.have.jsonBody(\"path\", \"/token/\" + pm.environment.get(\"OS_PROJECT\"));",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{URL}}:{{PORT}}/token/{{OS_PROJECT}}",
							"host": [
								"{{URL}}"
							],
							"port": "{{PORT}}",
							"path": [
								"token",
								"{{OS_PROJECT}}"
							]
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "Loader",
			"description": "",
			"item": [
				{
					"name": "Loader is IDLE",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"",
									"pm.test(\"Loaders status is IDLE\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].status).to.eql('IDLE');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "http://{{URL}}:{{PORT}}/loaders",
							"protocol": "http",
							"host": [
								"{{URL}}"
							],
							"port": "{{PORT}}",
							"path": [
								"loaders"
							]
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "Search",
			"description": "",
			"item": [
				{
					"name": "List all tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.sendRequest(\"http://{{OS_USERNAME}}:{{OS_PASSWORD}}@{{URL}}:{{PORT}}/token/{{OS_PROJECT}}\", function (err, response) {",
									"    pm.environment.set(\"OS_TOKEN\", response.text());",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-auth-token",
								"value": "{{OS_TOKEN}}"
							},
							{
								"key": "x-project",
								"value": "{{OS_PROJECT}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{URL}}:{{PORT}}/tests",
							"protocol": "http",
							"host": [
								"{{URL}}"
							],
							"port": "{{PORT}}",
							"path": [
								"tests"
							]
						},
						"description": "Create load test:\n\n* numConn: 2 conn\n* durationTimeMillis: 5 sec\n\nResponse:\n\n* Expect `200 Ok`\n* Body with json:\n\t- status: SCHEDULED"
					},
					"response": []
				}
			]
		}
	]
}